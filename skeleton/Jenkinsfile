String cron_working_branch = BRANCH_NAME != "develop" && BRANCH_NAME != "sandbox" ? "@daily" : ""

pipeline {

    triggers {
        cron(cron_working_branch)
    }

    agent {
        label 'java11'
    }
    stages {
        stage('Preparation') {
            steps {
                sh 'echo "Starting CI/CD Pipeline"'
            }
        }
        stage('Compile') {
            parallel {
                stage('Compile JAVA') {
                    steps {
                        sh '''
                            mvn -Dmaven.test.failure.ignore=true -s '/home/jenkins/.m2/settings.xml' clean install

                        '''

                    }
                    post {

                        always {
                            junit '**/target/surefire-reports/*.xml'
                        }
                    }
                }
                
                /*stage('Compile NPM') {
                    steps {
                    	sh 'rm -rf /node_modules/'
                        sh 'rm -f package-lock.json'
                        sh '''
                            npm install --no-cache frontend-service/
                        '''
                    }

                }*/
            }
        }

        stage('Setup sandbox docker images build'){
            steps{
                script {


                   env.API_GATEWAY_VERSION = sh script: 'mvn -f $WORKSPACE/parent-poms/parent/pom.xml  help:evaluate -Dexpression=apigatewayejemplo.version -q -DforceStdout', returnStdout: true
                   env.EXAMPLE_VERSION = sh script: 'mvn -f $WORKSPACE/parent-poms/parent/pom.xml  help:evaluate -Dexpression=common-interfaces.version -q -DforceStdout', returnStdout: true



                }
            }
        }
        stage('Build Docker Images') {

            parallel {
                stage('Build Core Platform') {
                    steps {
                        script {
                            echo 'Example Service'
                            def app
                            app = docker.build("k8s-swi001:5000/example-service:" + env.TAG_SUFIX, "--build-arg JAR_FILE=target/servicio-ejemplo-" + env.EXAMPLE_VERSION + ".jar --build-arg MS_PORT=8081 -f ./Dockerfile ./servicio-ejemplo")
                            app.push()
                            sh 'docker rmi k8s-swi001:5000/example-service:1.0${EXAMPLE_VERSION}'
                        }

                 }

                stage('Build Integration Layer') {
                  steps{
                        script {
                            echo 'API Gateway'
                            def app
                            app = docker.build("k8s-swi001:5000/api-gateway:"+env.API_GATEWAY_VERSION, "--build-arg JAR_FILE=target/apigatewayejemplo-" + env.API_GATEWAY_VERSION + ".jar --build-arg MS_PORT=8080 -f ./Dockerfile ./apigatewayejemplo ")
                            app.push()
                            sh 'docker rmi k8s-swi001:5000/api-gateway:${API_GATEWAY_VERSION}'
                        }

                }


                /*stage('Build Frontend') {
                    steps {
                        script {
                            echo 'ReportNet 3.0 Frontend'
                            def app
                            app = docker.build("k8s-swi001:5000/reportnet-frontend-service:3.0" + env.TAG_SUFIX, " ./frontend-service/")
                            app.push()               
                            sh 'docker rmi k8s-swi001:5000/reportnet-frontend-service:3.0${TAG_SUFIX}'     
                        }
                    }
                }*/

            }
        }
    }
}

